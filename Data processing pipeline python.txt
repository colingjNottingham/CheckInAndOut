{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<a href=\"https://www.nottingham.ac.uk/\"><img src=\"https://www.nottingham.ac.uk/Brand/LegacyAssets/images-multimedia/Supporting/Logo/Video/third-party-logos.JPG\" width=\"400\" align=\"center\"></a>\n",
    "\n",
    "<h1><center>Activity: Data Processing Pipeline</center></h1>\n",
    "\n",
    "<h2>About this Lab</h2><br>\n",
    "This Python script is designed for your activity in weekly tutorial for performing data processing pipeline in Python programming language using Jupyter Notebook from IBM Skills Network Labs. This is the similar activity that we demonstrated using \"FuelConsumption.csv\" dataset.<br>\n",
    "\n",
    "***Important note:*** Please note that you are not expected to know how to program in Python. You can copy and paste the code from the previous script. The main objective of this tutorial is to give you some practical experience about performing data processing pipeline using Python programming Language. We will cover each of the steps in details with practical activity later in this module."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Estimated time needed: 45 minutes\n",
    "\n",
    "The data weâ€™re going to work with is a very small \"breasttissue.csv\" dataset. Head on over to Moodle page to grab a copy of the dataset so that you can code along."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objectives\n",
    "\n",
    "In this lab, you will demonstrate:\n",
    "- Extract and Exploring data\n",
    "- Data Visualisation using graphs\n",
    "- Identify and dealing with Missing value and Outliers\n",
    "- Draw some conclusion\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Importing Needed packages\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2 id=\"understanding_data\">Understanding the Data</h2>\n",
    "\n",
    "### `breasttissue.csv`:\n",
    "\n",
    "Download **`breasttissue.csv`** dataset from Moodle and upload it to the same folder as Python script folder. This is a dataset with electrical impedance measurements in samples of freshly excised tissue from the Breast. It consists of 106 instances. 10 attributes: 9 features + 1 class attribute. \n",
    "\n",
    "Attribute Description\n",
    "- I0       Impedivity (ohm) at zero frequency\n",
    "- PA500    phase angle at 500 KHz\n",
    "- HFS      high-frequency slop e of phase angle\n",
    "- DA       impedance distance between spectral ends\n",
    "- AREA     area under spectrum\n",
    "- A/DA     area normalized by DA\n",
    "- MAX IP   maximum of the spectrum\n",
    "- DR       distance between I0 and real part of the maximum frequency point\n",
    "- P        length of the spectral curve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2 id=\"reading_data\">Reading the data</h2>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!wget -O FuelConsumption.csv https://mydata-1-labs-prod-misc-tools-us-east-1.labs.cognitiveclass.ai/user/nhussain920/?storage=cephfs/FuelConsumption.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data read into dataframe!\n"
     ]
    }
   ],
   "source": [
    "# Loading Dataset using Pandas from URL\n",
    "df = pd.read_csv(\"breasttissue.csv\") # df is the varaible that that read and store data into dataframe\n",
    "print(\"Data read into dataframe!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2 id=\"data_exploration\">Activity 1:Explore the data</h2>\n",
    "\n",
    "First, take a look at the first 30 rows of the data using df.head() function.\n",
    "Second, get the dimensions of the data frame using df.shape function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.1 Take a look at the first 30 rows of the data\n",
    "# Write your code here\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1.2 Get the dimensions of the dataframe.\n",
    "# Write you code here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='blue'> Double click here and Describe the dimension of the dataset in this cell.</font>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Activity 2: Get the information of the data structure and find Missing Values and explain\n",
    "\n",
    "Missing values are usually represented in the form of **Nan** or **null** or **None** in the dataset.\n",
    "\n",
    "**df.info()** function can be used to give information about the dataset. The second way of finding whether we have null values in the data is by using the **isnull()** function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2.1 Get the information of the data structure and observe missing values. \n",
    "# Write your code here.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='blue'>Double click here and Explain the missing values of this dataset in this cell.</font>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Activity 3 : Impute Missing Values with a single constant value.\n",
    "There are many options to pick from when replacing a missing value: Use **fillna()** to replace missing values.\n",
    "\n",
    "- A single pre-decided constant value, such as 0.\n",
    "- Taking value from another randomly selected sample.\n",
    "- Mean, median, or mode for the column.\n",
    "- Interpolate value using a predictive model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       524.794072\n",
      "1       330.000000\n",
      "2       551.879287\n",
      "3       380.000000\n",
      "4       362.831266\n",
      "          ...     \n",
      "101    2000.000000\n",
      "102    2600.000000\n",
      "103    1600.000000\n",
      "104    2300.000000\n",
      "105    2600.000000\n",
      "Name: I0, Length: 106, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 3.1 Replace all missing values with 0 from I0 Column.\n",
    "# I0 column is done for you.\n",
    "df['I0'].fillna(0, inplace=True)# To check changes call\n",
    "print(df['I0'].head(106))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing Missing values from other columns.\n",
    "# Write your code here.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Activity 4: Data Visualisation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "# 4.1 Plot each of the features: 'Class', 'HFS', 'DA', 'Area', and 'Max IP'.\n",
    "# Write you code here.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='blue'>Double click here and Describe what does each of these above figures represent.</font>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Correlation Example: Lets plot I0 vs DR, to see how they are correlated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 4.1 Plot I0 vs DR to see how correlated or linear is their relation\n",
    "# Sample code\n",
    "plt.scatter(df.I0, df.DR,  color='blue')\n",
    "plt.xlabel(\"I0\")\n",
    "plt.ylabel(\"DR\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4.2 Plot DA vs P to see how correlated or linear is their relation\n",
    "# Write your code here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Activity 5 Outlier Identification\n",
    "\n",
    "An outlier is a data point that differs significantly from the majority of the data taken from a sample or population. There are many possible causes of outliers, but here are a few to start you off:\n",
    "\n",
    "- Natural variation in data\n",
    "- Change in the behavior of the observed system\n",
    "- Errors in data collection\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If our dataset is small, we can detect the outlier by just looking at the dataset. \n",
    "But what if we have a huge dataset, how do we identify the outliers then?\n",
    "We need to use visualization and mathematical techniques.\n",
    "\n",
    "Below are some of the techniques of detecting outliers:\n",
    "\n",
    "-    Scatter plot\n",
    "-    Boxplots\n",
    "-    Z-score\n",
    "-    Inter Quantile Range(IQR)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5.1 Draw a Scatter Plot diagram, I0 vs PA500 to detect outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scatter Plot diagram, I0 vs PA500\n",
    "# Write your code here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color='blue'>Double click here and Describe your findings.</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Thank you for completing this tutorial!\n",
    "<h4>Author: Dr Nazmul Hussain</h4>\n",
    "<h4>Contributor: Dr Tominiyi Olupitan</h4>\n",
    "<h3 align=\"center\"> Â© University of Nottingham. All rights reserved. <h3/>\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}